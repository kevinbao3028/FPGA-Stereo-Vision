module PEAKS(
	input clk,
	input [7:0]	 corner
	input	[12:0] col,
	input [12:0] row,
	output signed [7:0] pixout
);
//break into 64x64 points
//initially just display peak
//10 64 blocks wide, need to store the blocks
reg	[7:0]		maxpoint	[9:0];
always @(posedge clk) begin
	maxpoint[col[12:6]]	<=	corner>maxpoint[col[12:6]]?corner:maxpoint[col[12:6]];
	//reset on every row edge
	//OR
	case(col[12:6])
	0:	maxpoint[0]	<=	corner>maxpoint[0] ? corner : maxpoint[0];
	1:	maxpoint[1]	<=	corner>maxpoint[1] ? corner : maxpoint[1];
	2:	maxpoint[2]	<=	corner>maxpoint[2] ? corner : maxpoint[2];
	3:	maxpoint[3]	<=	corner>maxpoint[3] ? corner : maxpoint[3];
	4:	maxpoint[4]	<=	corner>maxpoint[4] ? corner : maxpoint[4];
	5:	maxpoint[5]	<=	corner>maxpoint[5] ? corner : maxpoint[5];
	6:	maxpoint[6]	<=	corner>maxpoint[6] ? corner : maxpoint[6];
	7:	maxpoint[7]	<=	corner>maxpoint[7] ? corner : maxpoint[7];
	8:	maxpoint[8]	<=	corner>maxpoint[8] ? corner : maxpoint[8];
	9:	maxpoint[9]	<=	corner>maxpoint[9] ? corner : maxpoint[9];
	endcase
end
//step1: display points and display all at once to debug, overlayed on raw image
//step2:	state machine for frame on each point, buffer large as it comes in, then match incoming pixels on next frame
//		output to ram, once ran thru image, calculate homography
//rectify:

endmodule
